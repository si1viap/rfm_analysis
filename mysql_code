-- Skills used: GROUP BY, Joins, Unions, Views, CASE, PERCENT_RANK

-- create table

CREATE TABLE rfm_analysis(
	movement_type_id INT,
	parent_movement_id VARCHAR(2),
	agency_id BIGINT,
 	made_by_user_id BIGINT,
	subscription_id INT,
	course_activation_code_id INT,
	electronic_payment_id INT,
	agency_plan_log_id INT,
	live_course_event_session_id INT,
	two_factor_auth_log_id INT,
	value BIGINT,
	note VARCHAR(5000),
	ignore_for_balance_analysis VARCHAR(9),
	created_at TIMESTAMP,
	updated_at TIMESTAMP
);

ALTER TABLE rfm_analysis ADD COLUMN `order_id` int(10) UNSIGNED PRIMARY KEY AUTO_INCREMENT FIRST;

--RFM calculation
SELECT agency_id, DATEDIFF('2023-08-07',MAX(created_at)) AS Recency,
       COUNT(order_id) AS Frequency,
       SUM(value) AS Monetary_Value
FROM rfm_analysis
GROUP BY agency_id;

CREATE VIEW rfm_calc AS 
	SELECT agency_id, DATEDIFF('2023-08-07',MAX(created_at)) AS Recency,
			COUNT(order_id) AS Frequency,
       		SUM(value) AS Monetary_Value
	FROM rfm_analysis
	GROUP BY agency_id;

-- MinMax values
CREATE VIEW MinMax AS
SELECT 
		MIN(Recency) AS Rmin,
		MAX(Recency) AS Rmax,
		MIN(Frequency) AS Fmin,
		MAX(Frequency) AS Fmax,
		MIN(Monetary_Value) AS Mmin,
		MAX(Monetary_Value) AS Mmax
FROM rfm_calc;

-- Dashboard categories

-- Percentiles M

SELECT DISTINCT 
 		'Monetary_Value' AS RFM,
 		  M.Mmin AS Min,
		  FIRST_VALUE(Monetary_Value) OVER(ORDER BY CASE WHEN p <=0.2 THEN p END DESC) p2, 
		  FIRST_VALUE(Monetary_Value) OVER(ORDER BY CASE WHEN p <=0.4 THEN p END DESC) p4,       		  
		  FIRST_VALUE(Monetary_Value) OVER(ORDER BY CASE WHEN p <=0.6 THEN p END DESC) p6, 	    
                  FIRST_VALUE(Monetary_Value) OVER(ORDER BY CASE WHEN p <=0.8 THEN p END DESC) p8,
		  M.Mmax AS Max

FROM MinMax As M JOIN (SELECT Monetary_Value, PERCENT_RANK() OVER (ORDER BY Monetary_Value) p
FROM rfm_calc) AS t ON 1=1

-- Percentiles F

UNION SELECT DISTINCT 
 		'Frequency' AS RFM,
 		  F.Fmin AS Min,
		  FIRST_VALUE(Frequency) OVER(ORDER BY CASE WHEN p <=0.2 THEN p END DESC) p2, 
		  FIRST_VALUE(Frequency) OVER(ORDER BY CASE WHEN p <=0.4 THEN p END DESC) p4,       		  
                  FIRST_VALUE(Frequency) OVER(ORDER BY CASE WHEN p <=0.6 THEN p END DESC) p6, 	     		  
                  FIRST_VALUE(Frequency) OVER(ORDER BY CASE WHEN p <=0.8 THEN p END DESC) p8,
		  F.Fmax AS Max

FROM MinMax As F JOIN (SELECT Frequency, PERCENT_RANK() OVER (ORDER BY Frequency) p
FROM rfm_calc) AS t ON 1=1

-- Percentiles R

UNION SELECT DISTINCT 
 		'Recency' AS RFM,
 		  R.Rmin AS Min,
		  FIRST_VALUE(Recency) OVER(ORDER BY CASE WHEN p <=0.2 THEN p END DESC) p2, 
		  FIRST_VALUE(Recency) OVER(ORDER BY CASE WHEN p <=0.4 THEN p END DESC) p4,       		  
                  FIRST_VALUE(Recency) OVER(ORDER BY CASE WHEN p <=0.6 THEN p END DESC) p6, 	     		  
                  FIRST_VALUE(Recency) OVER(ORDER BY CASE WHEN p <=0.8 THEN p END DESC) p8,
		  R.Rmax AS Max

FROM MinMax As R JOIN (SELECT Recency, PERCENT_RANK() OVER (ORDER BY Recency) p
FROM rfm_calc) AS t ON 1=1;

-- RFM scores
SELECT agency_id, 
	   Recency,
		Frequency,
		Monetary_Value, 
		NTILE(5) OVER(ORDER BY Recency DESC) AS Recency_Score, 
		NTILE(5) OVER(ORDER BY Frequency ASC) AS Frequency_Score, 
		NTILE(5) OVER(ORDER BY Monetary_Value ASC) AS Monetary_Score 
FROM rfm_calc
ORDER BY agency_id;

CREATE VIEW RFM_scores AS
SELECT agency_id, 
	   Recency,
		Frequency,
		Monetary_Value, 
		NTILE(5) OVER(ORDER BY Recency DESC) AS Recency_Score, 
		NTILE(5) OVER(ORDER BY Frequency ASC) AS Frequency_Score, 
		NTILE(5) OVER(ORDER BY Monetary_Value ASC) AS Monetary_Score 
FROM rfm_calc
ORDER BY agency_id;

-- Final result
SELECT agency_id, CONCAT_WS('-',Recency_Score,Frequency_Score,Monetary_Score) AS R_F_M
FROM RFM_scores;

